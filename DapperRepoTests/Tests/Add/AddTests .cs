using System;
using System.Linq;
using DapperRepoTests.Entities;
using DapperRepoTests.Tests.BaseTestClasses;
using DapperRepoTests.Utils;
using NUnit.Framework;

namespace DapperRepoTests.Tests.Add
{
    public class AddTests : BaseSyncTestClass
    {
        public AddTests() : base($"{nameof(AddTests)}{RandomChars}")
        {
        }

        [Test]
        public void Ensure_we_can_add()
        {
            var testTableItem = new TableWithNoAutoGeneratedPrimaryKey
                {Id = Guid.NewGuid(), Name = "Michale", SomeNumber = 33};
            var resultBack = Sut.Add(testTableItem);

            Assert.IsNotNull(resultBack);
            Assert.AreEqual(testTableItem.Id, resultBack.Id);
            Assert.AreEqual(testTableItem.Name, resultBack.Name);
            Assert.AreEqual(testTableItem.SomeNumber, resultBack.SomeNumber);
            var resultInDb = DataBaseScriptRunnerAndBuilder.GetAll<TableWithNoAutoGeneratedPrimaryKey>(Connection);
            var items = resultInDb as TableWithNoAutoGeneratedPrimaryKey[] ?? resultInDb.ToArray();

            Assert.AreEqual(1, items.Length);
            var test = items.FirstOrDefault();
            Assert.IsNotNull(test);
            Assert.AreEqual(testTableItem.Id, test.Id);
            Assert.AreEqual(testTableItem.Name, test.Name);
            Assert.AreEqual(testTableItem.SomeNumber, test.SomeNumber);
        }
        
        [Test]
        public void Ensure_we_can_add_tables_with_diff_name()
        {
            var testTableItem = new TableWithNoAutoGeneratedPrimaryKey
                {Id = Guid.NewGuid(), Name = "Michale", SomeNumber = 33};
            var resultBack = Sut.Add(new TableWithNoAutoGeneratedPrimaryKeyDiffSqlName(testTableItem));

            Assert.IsNotNull(resultBack);
            Assert.AreEqual(testTableItem.Id, resultBack.Id);
            Assert.AreEqual(testTableItem.Name, resultBack.Name);
            Assert.AreEqual(testTableItem.SomeNumber, resultBack.SomeNumber);
            var resultInDb = DataBaseScriptRunnerAndBuilder.GetAll<TableWithNoAutoGeneratedPrimaryKey>(Connection);
            var items = resultInDb as TableWithNoAutoGeneratedPrimaryKey[] ?? resultInDb.ToArray();

            Assert.AreEqual(1, items.Length);
            var test = items.FirstOrDefault();
            Assert.IsNotNull(test);
            Assert.AreEqual(testTableItem.Id, test.Id);
            Assert.AreEqual(testTableItem.Name, test.Name);
            Assert.AreEqual(testTableItem.SomeNumber, test.SomeNumber);
        }

        [Test]
        public void Ensure_we_can_add_with_auto_increment()
        {
            var testTableItem = new TableWithAutoIncrementPrimaryKey() {Name = "Michale", SomeNumber = 33};
            var resultBack = Sut.Add(testTableItem);

            Assert.IsNotNull(resultBack);
            Assert.IsNotNull(resultBack.Id);
            Assert.AreEqual(testTableItem.Name, resultBack.Name);
            Assert.AreEqual(testTableItem.SomeNumber, resultBack.SomeNumber);
            var resultInDb = DataBaseScriptRunnerAndBuilder.GetAll<TableWithAutoIncrementPrimaryKey>(Connection);
            var items = resultInDb as TableWithAutoIncrementPrimaryKey[] ?? resultInDb.ToArray();

            Assert.AreEqual(1, items.Length);
            var test = items.FirstOrDefault();
            Assert.IsNotNull(test);
            Assert.AreEqual(test.Id, resultBack.Id);
            Assert.AreEqual(testTableItem.Name, test.Name);
            Assert.AreEqual(testTableItem.SomeNumber, test.SomeNumber);
        }
        
        [Test]
        public void Ensure_we_can_add_with_auto_increment_with_diff_names()
        {
            var testTableItem = new TableWithAutoIncrementPrimaryKey() {Name = "Michale", SomeNumber = 33};
            var resultBack = Sut.Add(new TableWithAutoIncrementPrimaryKeyDiffSqlName(testTableItem));

            Assert.IsNotNull(resultBack);
            Assert.IsNotNull(resultBack.Id);
            Assert.AreEqual(testTableItem.Name, resultBack.Name);
            Assert.AreEqual(testTableItem.SomeNumber, resultBack.SomeNumber);
            var resultInDb = DataBaseScriptRunnerAndBuilder.GetAll<TableWithAutoIncrementPrimaryKey>(Connection);
            var items = resultInDb as TableWithAutoIncrementPrimaryKey[] ?? resultInDb.ToArray();

            Assert.AreEqual(1, items.Length);
            var test = items.FirstOrDefault();
            Assert.IsNotNull(test);
            Assert.AreEqual(test.Id, resultBack.Id);
            Assert.AreEqual(testTableItem.Name, test.Name);
            Assert.AreEqual(testTableItem.SomeNumber, test.SomeNumber);
        }

        [Test]
        public void Ensure_we_can_add_with_null_field_for_other_values()
        {
            var testTableItem = new TableWithAutoIncrementPrimaryKey() {Name = "Michale", SomeNumber = null};
            var resultBack = Sut.Add(testTableItem);

            Assert.IsNotNull(resultBack);
            Assert.IsNotNull(resultBack.Id);
            Assert.AreEqual(testTableItem.Name, resultBack.Name);
            Assert.IsNull(resultBack.SomeNumber);
            var resultInDb = DataBaseScriptRunnerAndBuilder.GetAll<TableWithAutoIncrementPrimaryKey>(Connection);
            var items = resultInDb as TableWithAutoIncrementPrimaryKey[] ?? resultInDb.ToArray();

            Assert.AreEqual(1, items.Length);
            var test = items.FirstOrDefault();
            Assert.IsNotNull(test);
            Assert.AreEqual(test.Id, resultBack.Id);
            Assert.AreEqual(testTableItem.Name, test.Name);
            Assert.IsNull(test.SomeNumber);
        }
        
        [Test]
        public void Ensure_we_can_add_with_null_field_for_other_values_with_diff_name()
        {
            var testTableItem = new TableWithAutoIncrementPrimaryKey() {Name = "Michale", SomeNumber = null};
            var resultBack = Sut.Add(new TableWithAutoIncrementPrimaryKeyDiffSqlName(testTableItem));

            Assert.IsNotNull(resultBack);
            Assert.IsNotNull(resultBack.Id);
            Assert.AreEqual(testTableItem.Name, resultBack.Name);
            Assert.IsNull(resultBack.SomeNumber);
            var resultInDb = DataBaseScriptRunnerAndBuilder.GetAll<TableWithAutoIncrementPrimaryKey>(Connection);
            var items = resultInDb as TableWithAutoIncrementPrimaryKey[] ?? resultInDb.ToArray();

            Assert.AreEqual(1, items.Length);
            var test = items.FirstOrDefault();
            Assert.IsNotNull(test);
            Assert.AreEqual(test.Id, resultBack.Id);
            Assert.AreEqual(testTableItem.Name, test.Name);
            Assert.IsNull(test.SomeNumber);
        }
    }
}