using System;
using System.Linq;
using Mkb.DapperRepo.Tests.Entities;
using Mkb.DapperRepo.Tests.Tests.BaseTestClasses;
using Mkb.DapperRepo.Tests.Utils;
using NUnit.Framework;

namespace Mkb.DapperRepo.Tests.Tests.Repo.AddMany
{
    public class AddManyTests : BaseSyncTestClass
    {
        [Test]
        public void Ensure_we_can_add_multiple_records()
        {
            var testTableItems = new[]
            {
                new TableWithNoAutoGeneratedPrimaryKey {Id = Guid.NewGuid().ToString("N"), Name = "Michale", SomeNumber = 33},
                new TableWithNoAutoGeneratedPrimaryKey {Id = Guid.NewGuid().ToString("N"), Name = "othername", SomeNumber = 1}
            };

            Sut.AddMany(testTableItems);

            var result = DataBaseScriptRunnerAndBuilder.GetAll<TableWithNoAutoGeneratedPrimaryKey>(Connection);
            var items = result as TableWithNoAutoGeneratedPrimaryKey[] ?? result.ToArray();

            Assert.AreEqual(testTableItems.Length, items.Length);
            foreach (var item in testTableItems)
            {
                var test = items.FirstOrDefault(x => x.Id == item.Id);

                Assert.IsNotNull(test);
                Assert.AreEqual(item.Name, test.Name);
                Assert.AreEqual(item.SomeNumber, test.SomeNumber);
            }
        }

        [Test]
        public void Ensure_we_can_add_multiple_records_diff_name()
        {
            var testTableItems = new[]
            {
                new TableWithNoAutoGeneratedPrimaryKey {Id = Guid.NewGuid().ToString("N"), Name = "Michale", SomeNumber = 33},
                new TableWithNoAutoGeneratedPrimaryKey {Id = Guid.NewGuid().ToString("N"), Name = "othername", SomeNumber = 1}
            };

            Sut.AddMany(testTableItems.Select(f => new TableWithNoAutoGeneratedPrimaryKeyDiffSqlName(f)));

            var result = DataBaseScriptRunnerAndBuilder.GetAll<TableWithNoAutoGeneratedPrimaryKey>(Connection);
            var items = result as TableWithNoAutoGeneratedPrimaryKey[] ?? result.ToArray();

            Assert.AreEqual(testTableItems.Length, items.Length);
            foreach (var item in testTableItems)
            {
                var test = items.FirstOrDefault(x => x.Id == item.Id);

                Assert.IsNotNull(test);
                Assert.AreEqual(item.Name, test.Name);
                Assert.AreEqual(item.SomeNumber, test.SomeNumber);
            }
        }


        [Test]
        public void Ensure_we_can_add_multiple_records_auto_increment()
        {
            var testTableItems = new[]
            {
                new TableWithAutoIncrementPrimaryKey {Name = "Michale", SomeNumber = 33},
                new TableWithAutoIncrementPrimaryKey {Name = "othername"}
            };

            testTableItems = Sut.AddMany(testTableItems).ToArray();

            var result = DataBaseScriptRunnerAndBuilder.GetAll<TableWithAutoIncrementPrimaryKey>(Connection);
            var items = result as TableWithAutoIncrementPrimaryKey[] ?? result.ToArray();

            Assert.AreEqual(testTableItems.Length, items.Length);

            Assert.IsTrue(items.Any(x =>
                x.Id != null && x.Name == testTableItems.LastOrDefault().Name && x.SomeNumber == null));
            Assert.IsTrue(items.Any(x =>
                x.Id != null && x.SomeNumber == testTableItems.First().SomeNumber &&
                x.Name == testTableItems.First().Name));
        }

        [Test]
        public void Ensure_we_can_add_multiple_records_auto_increment_with_diff_name()
        {
            var testTableItems = new[]
            {
                new TableWithAutoIncrementPrimaryKey {Name = "Michale", SomeNumber = 33},
                new TableWithAutoIncrementPrimaryKey {Name = "othername"}
            };

            Sut.AddMany(testTableItems.Select(f => new TableWithAutoIncrementPrimaryKeyDiffSqlName(f)));

            var result = DataBaseScriptRunnerAndBuilder.GetAll<TableWithAutoIncrementPrimaryKey>(Connection);
            var items = result as TableWithAutoIncrementPrimaryKey[] ?? result.ToArray();

            Assert.AreEqual(testTableItems.Length, items.Length);

            Assert.IsTrue(items.Any(x =>
                x.Id != null && x.Name == testTableItems.LastOrDefault().Name && x.SomeNumber == null));
            Assert.IsTrue(items.Any(x =>
                x.Id != null && x.SomeNumber == testTableItems.First().SomeNumber &&
                x.Name == testTableItems.First().Name));
        }
    }
}