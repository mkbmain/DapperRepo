using System;
using System.Linq;
using System.Threading.Tasks;
using Mkb.DapperRepo.Exceptions;
using Mkb.DapperRepo.Tests.Entities;
using Mkb.DapperRepo.Tests.Tests.BaseTestClasses;
using Mkb.DapperRepo.Tests.Utils;
using Xunit;

namespace Mkb.DapperRepo.Tests.Tests.Repo.Update
{
    [Collection("Integration")]
    public class UpdateAsyncTests : BaseAsyncTestClass
    {
        [Fact]
        public async Task Ensure_we_cant_update_if_class_missing_priamarKey()
        {
            var exception = await 
                Assert.ThrowsAsync<PrimaryKeyNotFoundException>(async () =>
                    await Sut.Update(new SqlTableNoPrimaryKeyAttribute()));
            Assert.Equal($"Primary key not found on table:{nameof(SqlTableNoPrimaryKeyAttribute)}",
                exception.Message);
        }

        [Fact]
        public async Task Ensure_we_can_update_a_record()
        {
            var testTableItem = new TableWithNoAutoGeneratedPrimaryKey
                { Id = Guid.NewGuid().ToString("N"), NameTest = "Michale", SomeNumber = 33 };
            DataBaseScriptRunnerAndBuilder.InsertTableWithNoAutoGeneratedPrimaryKey(Connection,
                new[] { testTableItem });

            testTableItem.NameTest = "SomeOtherNAme";
            testTableItem.SomeNumber = 532;
            await Sut.Update(testTableItem);

            var records = DataBaseScriptRunnerAndBuilder.GetAll<TableWithNoAutoGeneratedPrimaryKey>(Connection)
                .ToArray();

            Assert.Single(records);
            Assert.Equal(testTableItem.Id, records.First().Id);
            Assert.Equal(testTableItem.SomeNumber, records.First().SomeNumber);
            Assert.Equal(testTableItem.NameTest, records.First().NameTest);
        }

        [Fact]
        public async Task Ensure_we_only_update_one_record()
        {
            var testTableItem = new TableWithNoAutoGeneratedPrimaryKey
                { Id = Guid.NewGuid().ToString("N"), NameTest = "Michale", SomeNumber = 33 };
            var dontTouch = new TableWithNoAutoGeneratedPrimaryKey
                { Id = Guid.NewGuid().ToString("N"), NameTest = "tgwre", SomeNumber = 33 };
            DataBaseScriptRunnerAndBuilder.InsertTableWithNoAutoGeneratedPrimaryKey(Connection,
                new[] { testTableItem, dontTouch });

            testTableItem.NameTest = "SomeOtherNAme";
            testTableItem.SomeNumber = 532;
            await Sut.Update(testTableItem);

            var records = DataBaseScriptRunnerAndBuilder.GetAll<TableWithNoAutoGeneratedPrimaryKey>(Connection)
                .ToArray();

            Assert.Equal(2, records.Length);
            Assert.Equal(testTableItem.Id, records.First(f => f.Id == testTableItem.Id).Id);
            Assert.Equal(testTableItem.SomeNumber, records.First(f => f.Id == testTableItem.Id).SomeNumber);
            Assert.Equal(testTableItem.NameTest, records.First(f => f.Id == testTableItem.Id).NameTest);

            Assert.Equal(dontTouch.Id, records.First(f => f.Id == dontTouch.Id).Id);
            Assert.Equal(dontTouch.SomeNumber, records.First(f => f.Id == dontTouch.Id).SomeNumber);
            Assert.Equal(dontTouch.NameTest, records.First(f => f.Id == dontTouch.Id).NameTest);
        }

        [Fact]
        public async Task Ensure_we_can_ignore_null_update_a_record()
        {
            var testTableItem = new TableWithNoAutoGeneratedPrimaryKey
                { Id = Guid.NewGuid().ToString("N"), NameTest = "Michale", SomeNumber = 33 };
            DataBaseScriptRunnerAndBuilder.InsertTableWithNoAutoGeneratedPrimaryKey(Connection,
                new[] { testTableItem });

            testTableItem.NameTest = null;
            testTableItem.SomeNumber = 532;
            await Sut.Update(testTableItem, true);

            var records = DataBaseScriptRunnerAndBuilder.GetAll<TableWithNoAutoGeneratedPrimaryKey>(Connection)
                .ToArray();

            Assert.Single(records);
            Assert.Equal(testTableItem.Id, records.First().Id);
            Assert.Equal(testTableItem.SomeNumber, records.First().SomeNumber);
            Assert.Equal("Michale", records.First().NameTest);
        }

        [Fact]
        public async Task Ensure_we_dont_ignore_nulls_by_default()
        {
            var testTableItem = new TableWithNoAutoGeneratedPrimaryKey
                { Id = Guid.NewGuid().ToString("N"), NameTest = "Michale", SomeNumber = 33 };
            DataBaseScriptRunnerAndBuilder.InsertTableWithNoAutoGeneratedPrimaryKey(Connection,
                new[] { testTableItem });

            testTableItem.NameTest = null;
            testTableItem.SomeNumber = 532;
            await Sut.Update(testTableItem);

            var records = DataBaseScriptRunnerAndBuilder.GetAll<TableWithNoAutoGeneratedPrimaryKey>(Connection)
                .ToArray();

            Assert.Single(records);
            Assert.Equal(testTableItem.Id, records.First().Id);
            Assert.Equal(testTableItem.SomeNumber, records.First().SomeNumber);
            Assert.Null(records.First().NameTest);
        }

        [Fact]
        public async Task Ensure_we_can_update_a_record_diff_name()
        {
            var testTableItem = new TableWithNoAutoGeneratedPrimaryKey
                { Id = Guid.NewGuid().ToString("N"), NameTest = "Michale", SomeNumber = 33 };
            DataBaseScriptRunnerAndBuilder.InsertTableWithNoAutoGeneratedPrimaryKey(Connection,
                new[] { testTableItem });

            testTableItem.NameTest = "SomeOtherNAme";
            testTableItem.SomeNumber = 532;
            await Sut.Update(new TableWithNoAutoGeneratedPrimaryKeyDiffSqlName(testTableItem));

            var records = DataBaseScriptRunnerAndBuilder.GetAll<TableWithNoAutoGeneratedPrimaryKey>(Connection)
                .ToArray();

            Assert.Single(records);
            Assert.Equal(testTableItem.Id, records.First().Id);
            Assert.Equal(testTableItem.SomeNumber, records.First().SomeNumber);
            Assert.Equal(testTableItem.NameTest, records.First().NameTest);
        }

        [Fact]
        public async Task Ensure_we_only_update_one_record_diff_name()
        {
            var testTableItem = new TableWithNoAutoGeneratedPrimaryKey
                { Id = Guid.NewGuid().ToString("N"), NameTest = "Michale", SomeNumber = 33 };
            var dontTouch = new TableWithNoAutoGeneratedPrimaryKey
                { Id = Guid.NewGuid().ToString("N"), NameTest = "tgwre", SomeNumber = 33 };
            DataBaseScriptRunnerAndBuilder.InsertTableWithNoAutoGeneratedPrimaryKey(Connection,
                new[] { testTableItem, dontTouch });

            testTableItem.NameTest = "SomeOtherNAme";
            testTableItem.SomeNumber = 532;
            await Sut.Update(new TableWithNoAutoGeneratedPrimaryKeyDiffSqlName(testTableItem));

            var records = DataBaseScriptRunnerAndBuilder.GetAll<TableWithNoAutoGeneratedPrimaryKey>(Connection)
                .ToArray();

            Assert.Equal(2, records.Length);
            Assert.Equal(testTableItem.Id, records.First(f => f.Id == testTableItem.Id).Id);
            Assert.Equal(testTableItem.SomeNumber, records.First(f => f.Id == testTableItem.Id).SomeNumber);
            Assert.Equal(testTableItem.NameTest, records.First(f => f.Id == testTableItem.Id).NameTest);

            Assert.Equal(dontTouch.Id, records.First(f => f.Id == dontTouch.Id).Id);
            Assert.Equal(dontTouch.SomeNumber, records.First(f => f.Id == dontTouch.Id).SomeNumber);
            Assert.Equal(dontTouch.NameTest, records.First(f => f.Id == dontTouch.Id).NameTest);
        }

        [Fact]
        public async Task Ensure_we_can_ignore_null_update_a_record_diff_name()
        {
            var testTableItem = new TableWithNoAutoGeneratedPrimaryKey
                { Id = Guid.NewGuid().ToString("N"), NameTest = "Michale", SomeNumber = 33 };
            DataBaseScriptRunnerAndBuilder.InsertTableWithNoAutoGeneratedPrimaryKey(Connection,
                new[] { testTableItem });

            testTableItem.NameTest = null;
            testTableItem.SomeNumber = 532;
            await Sut.Update(new TableWithNoAutoGeneratedPrimaryKeyDiffSqlName(testTableItem), true);

            var records = DataBaseScriptRunnerAndBuilder.GetAll<TableWithNoAutoGeneratedPrimaryKey>(Connection)
                .ToArray();

            Assert.Single(records);
            Assert.Equal(testTableItem.Id, records.First().Id);
            Assert.Equal(testTableItem.SomeNumber, records.First().SomeNumber);
            Assert.Equal("Michale", records.First().NameTest);
        }

        [Fact]
        public async Task Ensure_we_dont_ignore_nulls_by_default_diff_name()
        {
            var testTableItem = new TableWithNoAutoGeneratedPrimaryKey
                { Id = Guid.NewGuid().ToString("N"), NameTest = "Michale", SomeNumber = 33 };
            DataBaseScriptRunnerAndBuilder.InsertTableWithNoAutoGeneratedPrimaryKey(Connection,
                new[] { testTableItem });

            testTableItem.NameTest = null;
            testTableItem.SomeNumber = 532;
            await Sut.Update(new TableWithNoAutoGeneratedPrimaryKeyDiffSqlName(testTableItem));

            var records = DataBaseScriptRunnerAndBuilder.GetAll<TableWithNoAutoGeneratedPrimaryKey>(Connection)
                .ToArray();

            Assert.Single(records);
            Assert.Equal(testTableItem.Id, records.First().Id);
            Assert.Equal(testTableItem.SomeNumber, records.First().SomeNumber);
            Assert.Null(records.First().NameTest);
        }
    }
}