using System;
using System.Linq;
using Mkb.DapperRepo.Exceptions;
using Mkb.DapperRepo.Tests.Entities;
using Mkb.DapperRepo.Tests.Tests.BaseTestClasses;
using Mkb.DapperRepo.Tests.Utils;
using NUnit.Framework;

namespace Mkb.DapperRepo.Tests.Tests.Repo.Update
{
    public class UpdateTests : BaseSyncTestClass
    {
        [Test]
        public void Ensure_we_cant_update_if_class_missing_priamarKey()
        {
            var exception =
                Assert.Throws<PrimaryKeyNotFoundException>( () =>
                     Sut.Update(new SqlTableNoPrimaryKeyAttribute()));
            Assert.AreEqual($"Primary key not found on table:{nameof(SqlTableNoPrimaryKeyAttribute)}",
                exception.Message);
        }
        
        [Test]
        public void Ensure_we_can_update_a_record()
        {
            var testTableItem = new TableWithNoAutoGeneratedPrimaryKey
                {Id = Guid.NewGuid().ToString("N"), NameTest = "Michale", SomeNumber = 33};
            DataBaseScriptRunnerAndBuilder.InsertTableWithNoAutoGeneratedPrimaryKey(Connection, new[] {testTableItem});

            testTableItem.NameTest = "SomeOtherNAme";
            testTableItem.SomeNumber = 532;
            Sut.Update(testTableItem);

            var records = DataBaseScriptRunnerAndBuilder.GetAll<TableWithNoAutoGeneratedPrimaryKey>(Connection)
                .ToArray();

            Assert.AreEqual(1, records.Length);
            Assert.AreEqual(testTableItem.Id, records.First().Id);
            Assert.AreEqual(testTableItem.SomeNumber, records.First().SomeNumber);
            Assert.AreEqual(testTableItem.NameTest, records.First().NameTest);
        }

        [Test]
        public void Ensure_we_only_update_one_record()
        {
            var testTableItem = new TableWithNoAutoGeneratedPrimaryKey
                {Id = Guid.NewGuid().ToString("N"), NameTest = "Michale", SomeNumber = 33};
            var dontTouch = new TableWithNoAutoGeneratedPrimaryKey
                {Id = Guid.NewGuid().ToString("N"), NameTest = "tgwre", SomeNumber = 33};
            DataBaseScriptRunnerAndBuilder.InsertTableWithNoAutoGeneratedPrimaryKey(Connection,
                new[] {testTableItem, dontTouch});

            testTableItem.NameTest = "SomeOtherNAme";
            testTableItem.SomeNumber = 532;
            Sut.Update(testTableItem);

            var records = DataBaseScriptRunnerAndBuilder.GetAll<TableWithNoAutoGeneratedPrimaryKey>(Connection)
                .ToArray();

            Assert.AreEqual(2, records.Length);
            Assert.AreEqual(testTableItem.Id, records.First(f => f.Id == testTableItem.Id).Id);
            Assert.AreEqual(testTableItem.SomeNumber, records.First(f => f.Id == testTableItem.Id).SomeNumber);
            Assert.AreEqual(testTableItem.NameTest, records.First(f => f.Id == testTableItem.Id).NameTest);

            Assert.AreEqual(dontTouch.Id, records.First(f => f.Id == dontTouch.Id).Id);
            Assert.AreEqual(dontTouch.SomeNumber, records.First(f => f.Id == dontTouch.Id).SomeNumber);
            Assert.AreEqual(dontTouch.NameTest, records.First(f => f.Id == dontTouch.Id).NameTest);
        }


        [Test]
        public void Ensure_we_can_ignore_null_update_a_record()
        {
            var testTableItem = new TableWithNoAutoGeneratedPrimaryKey
                {Id = Guid.NewGuid().ToString("N"), NameTest = "Michale", SomeNumber = 33};
            DataBaseScriptRunnerAndBuilder.InsertTableWithNoAutoGeneratedPrimaryKey(Connection, new[] {testTableItem});

            testTableItem.NameTest = null;
            testTableItem.SomeNumber = 532;
            Sut.Update(testTableItem, true);

            var records = DataBaseScriptRunnerAndBuilder.GetAll<TableWithNoAutoGeneratedPrimaryKey>(Connection)
                .ToArray();

            Assert.AreEqual(1, records.Length);
            Assert.AreEqual(testTableItem.Id, records.First().Id);
            Assert.AreEqual(testTableItem.SomeNumber, records.First().SomeNumber);
            Assert.AreEqual("Michale", records.First().NameTest);
        }

        [Test]
        public void Ensure_we_dont_ignore_nulls_by_default()
        {
            var testTableItem = new TableWithNoAutoGeneratedPrimaryKey
                {Id = Guid.NewGuid().ToString("N"), NameTest = "Michale", SomeNumber = 33};
            DataBaseScriptRunnerAndBuilder.InsertTableWithNoAutoGeneratedPrimaryKey(Connection, new[] {testTableItem});

            testTableItem.NameTest = null;
            testTableItem.SomeNumber = 532;
            Sut.Update(testTableItem);

            var records = DataBaseScriptRunnerAndBuilder.GetAll<TableWithNoAutoGeneratedPrimaryKey>(Connection)
                .ToArray();

            Assert.AreEqual(1, records.Length);
            Assert.AreEqual(testTableItem.Id, records.First().Id);
            Assert.AreEqual(testTableItem.SomeNumber, records.First().SomeNumber);
            Assert.IsNull(records.First().NameTest);
        }


        [Test]
        public void Ensure_we_can_update_a_record_diff_name()
        {
            var testTableItem = new TableWithNoAutoGeneratedPrimaryKey
                {Id = Guid.NewGuid().ToString("N"), NameTest = "Michale", SomeNumber = 33};
            DataBaseScriptRunnerAndBuilder.InsertTableWithNoAutoGeneratedPrimaryKey(Connection, new[] {testTableItem});

            testTableItem.NameTest = "SomeOtherNAme";
            testTableItem.SomeNumber = 532;
            Sut.Update(new TableWithNoAutoGeneratedPrimaryKeyDiffSqlName(testTableItem));

            var records = DataBaseScriptRunnerAndBuilder.GetAll<TableWithNoAutoGeneratedPrimaryKey>(Connection)
                .ToArray();

            Assert.AreEqual(1, records.Length);
            Assert.AreEqual(testTableItem.Id, records.First().Id);
            Assert.AreEqual(testTableItem.SomeNumber, records.First().SomeNumber);
            Assert.AreEqual(testTableItem.NameTest, records.First().NameTest);
        }

        [Test]
        public void Ensure_we_only_update_one_record_diff_name()
        {
            var testTableItem = new TableWithNoAutoGeneratedPrimaryKey
                {Id = Guid.NewGuid().ToString("N"), NameTest = "Michale", SomeNumber = 33};
            var dontTouch = new TableWithNoAutoGeneratedPrimaryKey
                {Id = Guid.NewGuid().ToString("N"), NameTest = "tgwre", SomeNumber = 33};
            DataBaseScriptRunnerAndBuilder.InsertTableWithNoAutoGeneratedPrimaryKey(Connection,
                new[] {testTableItem, dontTouch});

            testTableItem.NameTest = "SomeOtherNAme";
            testTableItem.SomeNumber = 532;
            Sut.Update(new TableWithNoAutoGeneratedPrimaryKeyDiffSqlName(testTableItem));

            var records = DataBaseScriptRunnerAndBuilder.GetAll<TableWithNoAutoGeneratedPrimaryKey>(Connection)
                .ToArray();

            Assert.AreEqual(2, records.Length);
            Assert.AreEqual(testTableItem.Id, records.First(f => f.Id == testTableItem.Id).Id);
            Assert.AreEqual(testTableItem.SomeNumber, records.First(f => f.Id == testTableItem.Id).SomeNumber);
            Assert.AreEqual(testTableItem.NameTest, records.First(f => f.Id == testTableItem.Id).NameTest);

            Assert.AreEqual(dontTouch.Id, records.First(f => f.Id == dontTouch.Id).Id);
            Assert.AreEqual(dontTouch.SomeNumber, records.First(f => f.Id == dontTouch.Id).SomeNumber);
            Assert.AreEqual(dontTouch.NameTest, records.First(f => f.Id == dontTouch.Id).NameTest);
        }

        [Test]
        public void Ensure_we_can_ignore_null_update_a_record_diff_name()
        {
            var testTableItem = new TableWithNoAutoGeneratedPrimaryKey
                {Id = Guid.NewGuid().ToString("N"), NameTest = "Michale", SomeNumber = 33};
            DataBaseScriptRunnerAndBuilder.InsertTableWithNoAutoGeneratedPrimaryKey(Connection, new[] {testTableItem});

            testTableItem.NameTest = null;
            testTableItem.SomeNumber = 532;
            Sut.Update(new TableWithNoAutoGeneratedPrimaryKeyDiffSqlName(testTableItem), true);

            var records = DataBaseScriptRunnerAndBuilder.GetAll<TableWithNoAutoGeneratedPrimaryKey>(Connection)
                .ToArray();

            Assert.AreEqual(1, records.Length);
            Assert.AreEqual(testTableItem.Id, records.First().Id);
            Assert.AreEqual(testTableItem.SomeNumber, records.First().SomeNumber);
            Assert.AreEqual("Michale", records.First().NameTest);
        }

        [Test]
        public void Ensure_we_dont_ignore_nulls_by_default_diff_name()
        {
            var testTableItem = new TableWithNoAutoGeneratedPrimaryKey
                {Id = Guid.NewGuid().ToString("N"), NameTest = "Michale", SomeNumber = 33};
            DataBaseScriptRunnerAndBuilder.InsertTableWithNoAutoGeneratedPrimaryKey(Connection, new[] {testTableItem});

            testTableItem.NameTest = null;
            testTableItem.SomeNumber = 532;
            Sut.Update(new TableWithNoAutoGeneratedPrimaryKeyDiffSqlName(testTableItem));

            var records = DataBaseScriptRunnerAndBuilder.GetAll<TableWithNoAutoGeneratedPrimaryKey>(Connection)
                .ToArray();

            Assert.AreEqual(1, records.Length);
            Assert.AreEqual(testTableItem.Id, records.First().Id);
            Assert.AreEqual(testTableItem.SomeNumber, records.First().SomeNumber);
            Assert.IsNull(records.First().NameTest);
        }
    }
}