using System;
using System.Linq;
using System.Threading.Tasks;
using Mkb.DapperRepo.Tests.Entities;
using Mkb.DapperRepo.Tests.Tests.BaseTestClasses;
using Mkb.DapperRepo.Tests.Utils;
using NUnit.Framework;

namespace Mkb.DapperRepo.Tests.Tests.Repo.Delete
{
    public class DeleteAsyncTest : BaseAsyncTestClass
    {
        [Test]
        public async Task Ensure_we_can_Delete_a_record()
        {
            var testTableItem = new TableWithNoAutoGeneratedPrimaryKey {Id = Guid.NewGuid().ToString("N"), NameTest = "Michale", SomeNumber = 33};
            var dontTouch = new TableWithNoAutoGeneratedPrimaryKey {Id = Guid.NewGuid().ToString("N"), NameTest = "gwgw", SomeNumber = 12};
            DataBaseScriptRunnerAndBuilder.InsertTableWithNoAutoGeneratedPrimaryKey(Connection, new[] {testTableItem, dontTouch});
            await Sut.Delete(testTableItem);

            var records = DataBaseScriptRunnerAndBuilder.GetAll<TableWithNoAutoGeneratedPrimaryKey>(Connection).ToArray();
            Assert.AreEqual(1, records.Length);
            Assert.AreEqual(dontTouch.Id, records.First().Id);
            Assert.AreEqual(dontTouch.SomeNumber, records.First().SomeNumber);
            Assert.AreEqual(dontTouch.NameTest, records.First().NameTest);
        }
        
        [Test]
        public async Task Ensure_we_can_Delete_a_record_diff_name()
        {
            var testTableItem = new TableWithNoAutoGeneratedPrimaryKey {Id = Guid.NewGuid().ToString("N"), NameTest = "Michale", SomeNumber = 33};
            var dontTouch = new TableWithNoAutoGeneratedPrimaryKey {Id = Guid.NewGuid().ToString("N"), NameTest = "gwgw", SomeNumber = 12};
            DataBaseScriptRunnerAndBuilder.InsertTableWithNoAutoGeneratedPrimaryKey(Connection, new[] {testTableItem, dontTouch});
            await Sut.Delete(new TableWithNoAutoGeneratedPrimaryKeyDiffSqlName(testTableItem));

            var records = DataBaseScriptRunnerAndBuilder.GetAll<TableWithNoAutoGeneratedPrimaryKey>(Connection).ToArray();
            Assert.AreEqual(1, records.Length);
            Assert.AreEqual(dontTouch.Id, records.First().Id);
            Assert.AreEqual(dontTouch.SomeNumber, records.First().SomeNumber);
            Assert.AreEqual(dontTouch.NameTest, records.First().NameTest);
        }
    }
}