using System;
using System.Linq;
using System.Threading.Tasks;
using Mkb.DapperRepo.Tests.Entities;
using Mkb.DapperRepo.Tests.Tests.BaseTestClasses;
using Mkb.DapperRepo.Tests.Utils;
using Xunit;

namespace Mkb.DapperRepo.Tests.Tests.Repo.QueryMany
{
    [Collection("Integration")]
    public class QueryManyAsyncTests : BaseAsyncTestClass
    {
        [Fact]
        public async Task Ensure_we_Get_correct_record_back()
        {
            var testTableItems = new[]
            {
                new TableWithNoAutoGeneratedPrimaryKey {Id = Guid.NewGuid().ToString("N"), NameTest = "Wanted1", SomeNumber = 33},
                new TableWithNoAutoGeneratedPrimaryKey {Id = Guid.NewGuid().ToString("N"), NameTest = "othername", SomeNumber = 1},
                new TableWithNoAutoGeneratedPrimaryKey {Id = Guid.NewGuid().ToString("N"), NameTest = "Wanted2", SomeNumber = 33}
            };
            
            DataBaseScriptRunnerAndBuilder.InsertTableWithNoAutoGeneratedPrimaryKey(Connection, testTableItems);
            
            var items = (await Sut.QueryMany<TableWithNoAutoGeneratedPrimaryKey>("select * from TableWithNoAutoGeneratedPrimaryKey where SomeNumber = 33")).ToArray();
            var expected = testTableItems.Where(f => f.SomeNumber == 33);
            Assert.Equal(expected.Count(), items.Length);
            foreach (var item in expected)
            {
                var test = items.FirstOrDefault(x => x.Id == item.Id);

                Assert.NotNull(test);
                Assert.Equal(item.NameTest, test.NameTest);
                Assert.Equal(item.Id, test.Id);
                Assert.Equal(item.SomeNumber, test.SomeNumber);
            }
        }
        
        [Fact]
        public async Task Ensure_we_Get_correct_record_back_with_param()
        {
            var testTableItems = new[]
            {
                new TableWithNoAutoGeneratedPrimaryKey {Id = Guid.NewGuid().ToString("N"), NameTest = "Wanted1", SomeNumber = 33},
                new TableWithNoAutoGeneratedPrimaryKey {Id = Guid.NewGuid().ToString("N"), NameTest = "othername", SomeNumber = 1},
                new TableWithNoAutoGeneratedPrimaryKey {Id = Guid.NewGuid().ToString("N"), NameTest = "Wanted2", SomeNumber = 33}
            };
            
            DataBaseScriptRunnerAndBuilder.InsertTableWithNoAutoGeneratedPrimaryKey(Connection, testTableItems);
            
            var items = (await Sut.QueryMany<TableWithNoAutoGeneratedPrimaryKey>("select * from TableWithNoAutoGeneratedPrimaryKey where SomeNumber = @SomeNumber", new {SomeNumber = 33})).ToArray();
            var expected = testTableItems.Where(f => f.SomeNumber == 33);
            Assert.Equal(expected.Count(), items.Length);
            foreach (var item in expected)
            {
                var test = items.FirstOrDefault(x => x.Id == item.Id);

                Assert.NotNull(test);
                Assert.Equal(item.NameTest, test.NameTest);
                Assert.Equal(item.Id, test.Id);
                Assert.Equal(item.SomeNumber, test.SomeNumber);
            }
        }

        [Fact]
        public async Task Ensure_we_Get_correct_record_back_diff_name()
        {
            var testTableItems = new[]
            {
                new TableWithNoAutoGeneratedPrimaryKey {Id = Guid.NewGuid().ToString("N"), NameTest = "Wanted1", SomeNumber = 33},
                new TableWithNoAutoGeneratedPrimaryKey {Id = Guid.NewGuid().ToString("N"), NameTest = "othername", SomeNumber = 1},
                new TableWithNoAutoGeneratedPrimaryKey {Id = Guid.NewGuid().ToString("N"), NameTest = "Wanted2", SomeNumber = 33}
            };
            
            DataBaseScriptRunnerAndBuilder.InsertTableWithNoAutoGeneratedPrimaryKey(Connection, testTableItems);
            
            var items = (await Sut.QueryMany<TableWithNoAutoGeneratedPrimaryKeyDiffSqlName>("select * from TableWithNoAutoGeneratedPrimaryKey where SomeNumber = 33")).ToArray();
            var expected = testTableItems.Where(f => f.SomeNumber == 33);
            Assert.Equal(expected.Count(), items.Length);
            foreach (var item in expected)
            {
                var test = items.FirstOrDefault(x => x.Id == item.Id);

                Assert.NotNull(test);
                Assert.Equal(item.NameTest, test.Name);
                Assert.Equal(item.Id, test.Id);
                Assert.Equal(item.SomeNumber, test.SomeNumber);
            }
        }
        
        [Fact]
        public async Task Ensure_we_Get_correct_record_back_diff_name_with_param()
        {
            var testTableItems = new[]
            {
                new TableWithNoAutoGeneratedPrimaryKey {Id = Guid.NewGuid().ToString("N"), NameTest = "Wanted1", SomeNumber = 33},
                new TableWithNoAutoGeneratedPrimaryKey {Id = Guid.NewGuid().ToString("N"), NameTest = "othername", SomeNumber = 1},
                new TableWithNoAutoGeneratedPrimaryKey {Id = Guid.NewGuid().ToString("N"), NameTest = "Wanted2", SomeNumber = 33}
            };
            
            DataBaseScriptRunnerAndBuilder.InsertTableWithNoAutoGeneratedPrimaryKey(Connection, testTableItems);
            
            var items = (await Sut.QueryMany<TableWithNoAutoGeneratedPrimaryKeyDiffSqlName>("select * from TableWithNoAutoGeneratedPrimaryKey where SomeNumber = @SomeNumber",new {SomeNumber = 33})).ToArray();
            var expected = testTableItems.Where(f => f.SomeNumber == 33);
            Assert.Equal(expected.Count(), items.Length);
            foreach (var item in expected)
            {
                var test = items.FirstOrDefault(x => x.Id == item.Id);

                Assert.NotNull(test);
                Assert.Equal(item.NameTest, test.Name);
                Assert.Equal(item.Id, test.Id);
                Assert.Equal(item.SomeNumber, test.SomeNumber);
            }
        }
        
        [Fact]
        public async Task Ensure_if_we_have_no_records_we_do_not_blow_up()
        {
            var items = (await Sut.QueryMany<TableWithNoAutoGeneratedPrimaryKey>("select * from TableWithNoAutoGeneratedPrimaryKey")).ToArray();
            Assert.Empty(items);
        }
    }
}