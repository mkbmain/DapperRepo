using System.Linq;
using System.Threading.Tasks;
using Mkb.DapperRepo.Tests.Entities;
using Mkb.DapperRepo.Tests.Tests.BaseTestClasses;
using Mkb.DapperRepo.Tests.Utils;
using NUnit.Framework;

namespace Mkb.DapperRepo.Tests.Tests.Repo.GetExactMatches
{
    public class GetExactMatchesAsyncTest : BaseAsyncTestClass
    {
        [Test]
        public async Task Ensure_we_can_match_on_properties_exactly()
        {
            var item = new TableWithAutoIncrementPrimaryKey {Name = "Michale", SomeNumber = 33};
            var testTableItems = new[]
            {
                new TableWithAutoIncrementPrimaryKey {Name = "Michale", SomeNumber = 31},
                item,
                new TableWithAutoIncrementPrimaryKey {Name = "Michael", SomeNumber = 33},
                new TableWithAutoIncrementPrimaryKey {Name = "Michale", SomeNumber = null},
                new TableWithAutoIncrementPrimaryKey {Name = null, SomeNumber = 33}
            };

            DataBaseScriptRunnerAndBuilder.InsertTableWithAutoGeneratedPrimaryKey(Connection, testTableItems);

            var results = await Sut.GetExactMatches(item, false);
            Assert.AreEqual(1, results.Count());
            var test = results.First();
            Assert.IsNotNull(test);
            Assert.AreEqual(item.Name, test.Name);
            Assert.AreEqual(item.SomeNumber, test.SomeNumber);
        }

        [Test]
        public async Task Ensure_we_can_match_on_properties_withNull()
        {
            var item = new TableWithAutoIncrementPrimaryKey {Name = "Michale", SomeNumber = null};
            var testTableItems = new[]
            {
                new TableWithAutoIncrementPrimaryKey {Name = "Michale", SomeNumber = 31},
                item,
                new TableWithAutoIncrementPrimaryKey {Name = "Michael", SomeNumber = 33},
                new TableWithAutoIncrementPrimaryKey {Name = null, SomeNumber = 33}
            };

            DataBaseScriptRunnerAndBuilder.InsertTableWithAutoGeneratedPrimaryKey(Connection, testTableItems);

            var results = await Sut.GetExactMatches(item, false);
            Assert.AreEqual(1, results.Count());
            var test = results.First();
            Assert.IsNotNull(test);
            Assert.AreEqual(item.Name, test.Name);
            Assert.AreEqual(item.SomeNumber, test.SomeNumber);
        }

        [Test]
        public async Task Ensure_we_can_match_on_properties_ignoring_nulls()
        {
            var item = new TableWithAutoIncrementPrimaryKey {Name = "Michale", SomeNumber = 33};
            var testTableItems = new[]
            {
                new TableWithAutoIncrementPrimaryKey {Name = "Michale", SomeNumber = 31},
                item,
                new TableWithAutoIncrementPrimaryKey {Name = "Michael", SomeNumber = 33},
                new TableWithAutoIncrementPrimaryKey {Name = "Michale", SomeNumber = null},
                new TableWithAutoIncrementPrimaryKey {Name = null, SomeNumber = 33}
            };

            DataBaseScriptRunnerAndBuilder.InsertTableWithAutoGeneratedPrimaryKey(Connection, testTableItems);
            var oldNumber = item.SomeNumber;
            item.SomeNumber = null;
            var results = await Sut.GetExactMatches(item, true);
            Assert.AreEqual(3, results.Count());
            Assert.AreEqual(3, results.Count(t => t.Name == item.Name));
            Assert.AreEqual(1, results.Count(t => t.SomeNumber == oldNumber));
            Assert.AreEqual(1, results.Count(t => t.SomeNumber is null));
        }
    }
}