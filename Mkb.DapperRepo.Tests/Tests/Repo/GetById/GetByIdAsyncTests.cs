using System;
using System.Linq;
using System.Threading.Tasks;
using Mkb.DapperRepo.Tests.Entities;
using Mkb.DapperRepo.Tests.Tests.BaseTestClasses;
using Mkb.DapperRepo.Tests.Utils;
using Xunit;

namespace Mkb.DapperRepo.Tests.Tests.Repo.GetById
{
    [Collection("Integration")]
    public class GetByIdAsyncTest : BaseAsyncTestClass
    {
        [Fact]
        public async Task Ensure_we_Can_Get_correct_record_Back()
        {
            var testTableItems = new[]
            {
                new TableWithNoAutoGeneratedPrimaryKey {Id = Guid.NewGuid().ToString("N"), NameTest = "Michale", SomeNumber = 33},
                new TableWithNoAutoGeneratedPrimaryKey {Id = Guid.NewGuid().ToString("N"), NameTest = "othername", SomeNumber = 1}
            };

            DataBaseScriptRunnerAndBuilder.InsertTableWithNoAutoGeneratedPrimaryKey(Connection, testTableItems);

            var item = await Sut.GetById(new TableWithNoAutoGeneratedPrimaryKey {Id = testTableItems.First().Id});
            Assert.NotNull(item);
            Assert.Equal(testTableItems.First().Id, item.Id);
            Assert.Equal(testTableItems.First().SomeNumber, item.SomeNumber);
            Assert.Equal(testTableItems.First().NameTest, item.NameTest);
        }
        
        [Fact]
        public async Task Ensure_we_Can_Get_correct_record_Back_diff_name()
        {
            var testTableItems = new[]
            {
                new TableWithNoAutoGeneratedPrimaryKey {Id = Guid.NewGuid().ToString("N"), NameTest = "Michale", SomeNumber = 33},
                new TableWithNoAutoGeneratedPrimaryKey {Id = Guid.NewGuid().ToString("N"), NameTest = "othername", SomeNumber = 1}
            };

            DataBaseScriptRunnerAndBuilder.InsertTableWithNoAutoGeneratedPrimaryKey(Connection, testTableItems);

            var item = await Sut.GetById(new TableWithNoAutoGeneratedPrimaryKeyDiffSqlName {Id = testTableItems.First().Id});
            Assert.NotNull(item);
            Assert.Equal(testTableItems.First().Id, item.Id);
            Assert.Equal(testTableItems.First().SomeNumber, item.SomeNumber);
            Assert.Equal(testTableItems.First().NameTest, item.Name);
        }


        [Fact]
        public async Task Ensure_we_Can_Get_correct_record_Back_when_id_is_a_number()
        {
            var testTableItems = new[]
            {
                new TableWithAutoIncrementPrimaryKey {NameTests = "Michale", SomeNum = 33},
            };
            DataBaseScriptRunnerAndBuilder.InsertTableWithAutoGeneratedPrimaryKey(Connection, testTableItems);
            var record = DataBaseScriptRunnerAndBuilder.GetAll<TableWithAutoIncrementPrimaryKey>(Connection).First();


            var item = await Sut.GetById(new TableWithAutoIncrementPrimaryKey {BigTest = record.BigTest});
            Assert.NotNull(item);
            Assert.Equal(record.BigTest, item.BigTest);
            Assert.Equal(testTableItems.First().SomeNum, item.SomeNum);
            Assert.Equal(testTableItems.First().NameTests, item.NameTests);
        }
        
        [Fact]
        public async Task Ensure_we_Can_Get_correct_record_Back_when_id_is_a_number_diff_name()
        {
            var testTableItems = new[]
            {
                new TableWithAutoIncrementPrimaryKey {NameTests = "Michale", SomeNum = 33},
            };
            DataBaseScriptRunnerAndBuilder.InsertTableWithAutoGeneratedPrimaryKey(Connection, testTableItems);
            var record = DataBaseScriptRunnerAndBuilder.GetAll<TableWithAutoIncrementPrimaryKey>(Connection).First();


            var item = await Sut.GetById(new TableWithAutoIncrementPrimaryKeyDiffSqlName {TestId = record.BigTest});
            Assert.NotNull(item);
            Assert.Equal(record.BigTest, item.TestId);
            Assert.Equal(testTableItems.First().SomeNum, item.SomeNum);
            Assert.Equal(testTableItems.First().NameTests, item.NameTest);
        }

        [Fact]
        public async Task Ensure_if_no_record_found_we_return_null()
        {
            var testTableItems = new[]
            {
                new TableWithNoAutoGeneratedPrimaryKey {Id = Guid.NewGuid().ToString("N"), NameTest = "Michale", SomeNumber = 33},
                new TableWithNoAutoGeneratedPrimaryKey {Id = Guid.NewGuid().ToString("N"), NameTest = "othername", SomeNumber = 1}
            };

            DataBaseScriptRunnerAndBuilder.InsertTableWithNoAutoGeneratedPrimaryKey(Connection, testTableItems);

            var item = await Sut.GetById(new TableWithNoAutoGeneratedPrimaryKey {Id = Guid.NewGuid().ToString("N")});
            Assert.Null(item);
        }
        
        [Fact]
        public async Task Ensure_if_no_record_found_we_return_null_diff_name()
        {
            var testTableItems = new[]
            {
                new TableWithNoAutoGeneratedPrimaryKey {Id = Guid.NewGuid().ToString("N"), NameTest = "Michale", SomeNumber = 33},
                new TableWithNoAutoGeneratedPrimaryKey {Id = Guid.NewGuid().ToString("N"), NameTest = "othername", SomeNumber = 1}
            };

            DataBaseScriptRunnerAndBuilder.InsertTableWithNoAutoGeneratedPrimaryKey(Connection, testTableItems);

            var item = await Sut.GetById(new TableWithNoAutoGeneratedPrimaryKeyDiffSqlName {Id = Guid.NewGuid().ToString("N")});
            Assert.Null(item);
        }
    }
}