using System;
using System.Linq;
using Mkb.DapperRepo.Tests.Entities;
using Mkb.DapperRepo.Tests.Tests.BaseTestClasses;
using Mkb.DapperRepo.Tests.Utils;
using Xunit;

namespace Mkb.DapperRepo.Tests.Tests.Repo.GetAllByX
{
    [Collection("Integration")]
    public class GetAllByXTests : BaseSyncTestClass
    {
        [Fact]
        public void Ensure_we_can_match_exact()
        {
            var testTableItems = new[]
            {
                new TableWithNoAutoGeneratedPrimaryKey {Id = Guid.NewGuid().ToString("N"), NameTest = "Michale", SomeNumber = 33},
                new TableWithNoAutoGeneratedPrimaryKey {Id = Guid.NewGuid().ToString("N"), NameTest = "Michael", SomeNumber = 13},
                new TableWithNoAutoGeneratedPrimaryKey {Id = Guid.NewGuid().ToString("N"), NameTest = "chaal", SomeNumber = 73},
                new TableWithNoAutoGeneratedPrimaryKey {Id = Guid.NewGuid().ToString("N"), NameTest = "othername", SomeNumber = 1}
            };

            DataBaseScriptRunnerAndBuilder.InsertTableWithNoAutoGeneratedPrimaryKey(Connection, testTableItems);

            var result =
                Sut.GetAllByX<TableWithNoAutoGeneratedPrimaryKey, int?>("SomeNumber",
                    testTableItems.First().SomeNumber);

            Assert.Single(result);
        }

        [Fact]
        public void Ensure_we_can_match_exact_diff_name()
        {
            var testTableItems = new[]
            {
                new TableWithNoAutoGeneratedPrimaryKey {Id = Guid.NewGuid().ToString("N"), NameTest = "Michale", SomeNumber = 33},
                new TableWithNoAutoGeneratedPrimaryKey {Id = Guid.NewGuid().ToString("N"), NameTest = "Michael", SomeNumber = 13},
                new TableWithNoAutoGeneratedPrimaryKey {Id = Guid.NewGuid().ToString("N"), NameTest = "chaal", SomeNumber = 73},
                new TableWithNoAutoGeneratedPrimaryKey {Id = Guid.NewGuid().ToString("N"), NameTest = "othername", SomeNumber = 1}
            };

            DataBaseScriptRunnerAndBuilder.InsertTableWithNoAutoGeneratedPrimaryKey(Connection, testTableItems);

            var result = Sut.GetAllByX<TableWithNoAutoGeneratedPrimaryKeyDiffSqlName, String>("Name", "Michael");

            Assert.Single(result);
        }

        [Fact]
        public void Ensure_we_throw_error_if_property_not_defined_correct()
        {
            var exception = Assert.Throws<Exception>(() =>
                Sut.GetAllByX<TableWithNoAutoGeneratedPrimaryKey, int>(nameof(TableWithNoAutoGeneratedPrimaryKey.NameTest), 532));

            Assert.Contains("Type Must Be Int32", exception.Message);
        }

        [Fact]
        public void Ensure_we_throw_error_if_property_is_not_found()
        {
            var exception = Assert.Throws<Exception>(() =>
                Sut.GetAllByX<TableWithNoAutoGeneratedPrimaryKey, String>("ge", "%cha%"));

            Assert.Contains("not found in Type:", exception.Message);
        }
    }
}