using System;
using System.Collections.Generic;
using System.Data.Common;
using System.Data.SqlClient;
using System.Linq;
using Dapper;
using Microsoft.Data.Sqlite;
using Mkb.DapperRepo.Tests.Entities;
using MySql.Data.MySqlClient;
using Npgsql;

namespace Mkb.DapperRepo.Tests.Utils
{
    public static class DataBaseScriptRunnerAndBuilder
    {
        public static void InsertTableWithNoAutoGeneratedPrimaryKey(string connection,
            IEnumerable<TableWithNoAutoGeneratedPrimaryKey> testTables)
        {
            var sql =
                $"Insert into {nameof(TableWithNoAutoGeneratedPrimaryKey)} (id,name,SomeNumber) values{string.Join(",", testTables.Select(f => $"('{f.Id}','{f.NameTest ?? "Null"}',{f.SomeNumber?.ToString() ?? "Null"})"))}";
            ExecuteCommandNonQuery(connection, sql);
        }

        public static void InsertTableWithAutoGeneratedPrimaryKey(string connection,
            IEnumerable<TableWithAutoIncrementPrimaryKey> testTables)
        {
            var sql =
                $"Insert into {nameof(TableWithAutoIncrementPrimaryKey)} (name,SomeNumber) values{string.Join(",", testTables.Select(f => $"('{f.NameTests ?? "Null"}',{f.SomeNum?.ToString() ?? "Null"})"))}";
            ExecuteCommandNonQuery(connection, sql);
        }


        public static void KillDb(string connectionToMaster, string dbName)
        {
            switch (Connection.SelectedEnvironment)
            {
                case Environment.Sqlite:
                {
                    // this does not appear to work but rebuild solves it so meh
                    var path = System.IO.Path.Combine(System.Environment.CurrentDirectory, dbName);
                    System.IO.File.Delete(path);
                    return;
                }
                case Environment.PostgreSQL:
                    ExecuteCommandNonQuery(connectionToMaster, $"REVOKE CONNECT ON DATABASE {dbName} FROM public;");
                    ExecuteCommandNonQuery(connectionToMaster, @$"SELECT pg_terminate_backend(pg_stat_activity.pid)
            FROM pg_stat_activity
            WHERE pg_stat_activity.datname = '{dbName}';");
                    ExecuteCommandNonQuery(connectionToMaster, $"DROP DATABASE {dbName};");
                    return;
                default:
                {
                    var start = Connection.SelectedEnvironment == Environment.Sql
                        ? $"ALTER DATABASE [{dbName}] SET  SINGLE_USER WITH ROLLBACK IMMEDIATE"
                        : "";
                    ExecuteCommandNonQuery(connectionToMaster, $"{start}{System.Environment.NewLine}DROP DATABASE {dbName}");
                    break;
                }
            }
        }

        public static void ExecuteCommandNonQuery(string connection, string sql)
        {
            if (string.IsNullOrWhiteSpace(sql)) return;
            using var conn = GetConnection(connection);
            conn.Open();
            conn.Execute(sql);
        }

        public static DbConnection GetConnection(string connection)
        {
            switch (Connection.SelectedEnvironment)
            {
                case Environment.MySql:
                    return new MySqlConnection(connection);
                case Environment.PostgreSQL:
                    return new NpgsqlConnection(connection);
                case Environment.Sqlite:
                    return new SqliteConnection(connection);
                case Environment.Sql:
                default:
                    return new SqlConnection(connection);
            }
        }

        public static IEnumerable<T> GetAll<T>(string connection) where T : class, new()
        {
            using var conn = GetConnection(connection);
            conn.Open();
            return conn.Query<T>($"select * from {typeof(T).Name}");
        }
    }
}